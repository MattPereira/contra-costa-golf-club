# https://docs.docker.com/compose/compose-file/
# https://github.com/docker/awesome-compose

services:
  postgres:
    image: postgres
    container_name: postgres
    restart : always
    volumes:
      - db-data:/var/lib/postgresql/data
    expose:
      - 5432
    # environment variables set here will be implimented by docker compose build
    # i. e. the name of database will be golf-db and the password will be pineapple
    # also the default POSTGRES_USER is "postgres"
    environment:
      POSTGRES_PASSWORD: pineapple
      POSTGRES_DB: golf-db
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  express:
    build:
      context: ./backend
      dockerfile: ../backend/Dockerfile
    container_name: express
    # Volumes allow backend changes to take effect inside container without having to rebuild the image
    volumes:
      - ./backend/:/code
      - ./backend/package.json:/code/package.json
      - ./backend/package-lock.json:/code/package-lock.json
    command: npm run dev
    ports:
      - 3001:3001
    environment:
      NODE_ENV: development
      # Figure out how to use .env file instead?
      # postgres://username:password@host:port/database
      DATABASE_URL: postgres://postgres:pineapple@postgres:5432/golf-db
    depends_on:
      postgres:
        condition: service_healthy

  react:
    build:
      context: ./frontend
      dockerfile: ../frontend/Dockerfile
    container_name: react
    ports:
      - 3000:3000
    # Volumes allow for frontend changes to be seen in running container without having to rebuild the image 
    volumes:
      - ./frontend/src:/code/src
      - /code/node_modules
    depends_on:
      - express

# This particular volume keeps database data persistent even if the container is deleted
volumes:
  db-data:
